                                                 *conjure-client-guile-socket*

==============================================================================
CONTENTS                                *conjure-client-guile-socket-contents*

    1. Introduction ........ |conjure-client-guile-socket-introduction|
    2. Mappings ................ |conjure-client-guile-socket-mappings|
    3. Configuration ...... |conjure-client-guile-socket-configuration|

==============================================================================
INTRODUCTION                        *conjure-client-guile-socket-introduction*
>
  Guile is the "GNU Ubiquitous Intelligent Language for Extensions",
  implementing the Scheme dialect of Lisp.

With this client, Conjure connects to Guile's REPL listening on a local path
or TCP socket.  Start a Guile REPL by running your Guile program using
"--listen" command-line option. See "Command-line Options" section of the
Guile Reference Manual for details. Examples are given below in the
configuration items section below.

To use this client for Scheme filetypes, you must override the configuration for it.
>
  let g:conjure#filetype#scheme = "conjure.client.guile.socket"

Check out `:ConjureSchool` if you're unsure about what evaluation operations
you can perform.

 * https://www.gnu.org/software/guile/
 * https://www.gnu.org/software/guile/manual/html_node/Command_002dline-Options.html

==============================================================================
MAPPINGS                                *conjure-client-guile-socket-mappings*

These mappings are the defaults, you can change them as described in
|conjure-mappings| and |conjure-configuration|.

See |conjure-client-guile-socket-configuration| for specific configuration
options relevant to these mappings.

<localleader>cc          Connect to Guile REPL

<localleader>cd          Disconnect from Guile REPL

==============================================================================
CONFIGURATION                      *conjure-client-guile-socket-configuration*

All configuration can be set as described in |conjure-configuration|.


                                 *g:conjure#client#guile#socket#mapping#start*
`g:conjure#client#guile#socket#mapping#start`
            Connect to Guile REPL
            Default: `"cs"`

                                  *g:conjure#client#guile#socket#mapping#stop*
`g:conjure#client#guile#socket#mapping#stop`
            Disconnect from Guile REPL
            Default: `"cS"`


The next two configuration items determine how the Guile client connects to a
Guile REPL. If the `pipename` is specified (i.e., non-nil) it used. If the
`host-port` is specified, it is used. If both are specified, the `pipename` is
used because the Guile Reference Manual recommends using a UNIX domain socket
rather than a TCP connection. If neither are specified, then an error message
is printed.

                                      *g:conjure#client#guile#socket#pipename*
`g:conjure#client#guile#socket#pipename`
            The path to your Guile socket used to connect to the Guile REPL.
            Guile requires this path to be absolute!

            Example command to start a Guile REPL:
                     `guile --listen=/path/to/guile-repl.socket`

            Example value: `"/home/user/guile-repl.socket"`

            Default: `nil`

                                      *g:conjure#client#guile#socket#host_port*
`g:conjure#client#guile#socket#host_port`
            The "hostname:port" of the TCP socket to the Guile REPL.

            If "port" is not specified, the default Guile port 37146 is used.

            If `nil`, "localhost:37146" is used.

            Examples to start a Guile REPL:
                     `guile --listen`
                     `guile --listen="localhost"`
                     `guile --listen="localhost:37146"`
                     `guile --listen="4444"`

            Note: The first three examples are the same.
                  The last example listens on "localhost:4444"
                  See the "Command-line Options" section of the Guile Reference Manual.

            Example value:
                     `"localhost"`

            Default: `nil`

                                      *g:conjure#client#guile#socket#enable_completions*
`g:conjure#client#guile#socket#enable_completions`
            Enable completion suggestions through the repl via Guile's readline
            apropos-completion-function, which offers completions for functions
            and variables (all defines).

            Example value:
                     `false`

            Default: `true`

vim:tw=78:sw=2:ts=2:ft=help:norl:et:listchars=
