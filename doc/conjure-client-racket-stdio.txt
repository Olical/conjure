                                                 *conjure-client-racket-stdio*

==============================================================================
CONTENTS                                *conjure-client-racket-stdio-contents*

    1. Introduction ........ |conjure-client-racket-stdio-introduction|
    2. Mappings ................ |conjure-client-racket-stdio-mappings|
    3. Configuration ...... |conjure-client-racket-stdio-configuration|

==============================================================================
INTRODUCTION                        *conjure-client-racket-stdio-introduction*
>
  Racket is a general-purpose, multi-paradigm programming language based on
  the Scheme dialect of Lisp. It is designed to be a platform for programming
  language design and implementation.

Conjure starts a Racket REPL within Neovim when you first open a Racket file.

You should be able to evaluate files and forms as you would with other Conjure
supported languages right away.

Check out `:ConjureSchool` if you're unsure about what evaluation operations
you can perform.

 * https://racket-lang.org/

==============================================================================
MAPPINGS                                *conjure-client-racket-stdio-mappings*

These mappings are the defaults, you can change them as described in
|conjure-mappings| and |conjure-configuration|.

See |conjure-client-racket-stdio-configuration| for specific configuration
options relevant to these mappings.

<localleader>cs          Start the Racket REPL if it's not running already.

<localleader>cS          Stop any existing Racket REPL.

<localleader>ei          Send an interrupt signal to the REPL. Useful for
                         hanging processes or unbalanced parenthesis.

==============================================================================
CONFIGURATION                      *conjure-client-racket-stdio-configuration*

All configuration can be set as described in |conjure-configuration|.


                                 *g:conjure#client#racket#stdio#mapping#start*
`g:conjure#client#racket#stdio#mapping#start`
            Start the Racket REPL if it's not running already.
            Default: `"cs"`

                                  *g:conjure#client#racket#stdio#mapping#stop*
`g:conjure#client#racket#stdio#mapping#stop`
            Stop any existing Racket REPL.
            Default: `"cS"`

                             *g:conjure#client#racket#stdio#mapping#interrupt*
`g:conjure#client#racket#stdio#mapping#interrupt`
            Send an interrupt signal to the REPL. Useful for hanging processes
            or unbalanced parenthesis.
            Default: `"ei"`

                                       *g:conjure#client#racket#stdio#command*
`g:conjure#client#racket#stdio#command`
            Command used to start the Racket REPL, you can modify this to add
            arguments or change the command entirely.
            Default: `"racket"`

                                    *g:conjure#client#racket#stdio#auto_enter*
`g:conjure#client#racket#stdio#auto_enter`
            Conjure automatically runs `,enter [module]` when you start a REPL
            or enter a buffer. In most cases this is useful and makes your
            REPL interactions feel local to the current module you're looking
            at.

            In some `#lang` configurations (like `#lang reader ...`) this will
            break the REPL because the normal REPL hooks we use get removed
            when you `,enter` that particular module.

            If you experience issues with a particular lang, please try
            setting this option to `false`.

            Related issue: https://github.com/Olical/conjure/issues/643

            Default: `true`

                                *g:conjure#client#racket#stdio#prompt_pattern*
`g:conjure#client#racket#stdio#prompt_pattern`
            Lua pattern to identify a new REPL prompt. This match signals to
            Conjure that the previous evaluation is complete and we're ready
            to submit more code as well as collect all output prior to the
            marker as the result.
            Default: `"\n?[\"%w%-./_]*> "`

vim:tw=78:sw=2:ts=2:ft=help:norl:et:listchars=
